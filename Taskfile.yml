  version: '3'

  # Static env vars for the task runners
  env:
    SERVICE_NAME: service-name
    GITHUB_OWNER: my-owner
    GITHUB_REPO: my-repo
    DOCKER_REPO: my-repo

  # Dynamic variables for the task runners
  vars:
    GIT_COMMIT:
      sh: git log -n 1 --format=%h
    GO_VERSION:
      sh: go version | awk '{ print $3 }' | sed s/go//

  tasks:
    default:
      cmds:
        - task --list

    test:
      desc: "Unit tests for application"
      cmds:
        - go test ./...

    build:
      desc: "Builds the application as a binary file"
      cmds:
        - CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-X main.Version={{.GIT_COMMIT}}" -o builds/$SERVICE_NAME-linux-amd64

    build:docker:
      desc: "Builds the application in a docker container"
      cmds:
        - docker build --build-arg GITHUB_OWNER=$GITHUB_OWNER --build-arg GITHUB_REPO=$GITHUB_REPO --build-arg SERVICE_NAME=$SERVICE_NAME . -t $DOCKER_REPO/$IMAGE_NAME:{{.GIT_COMMIT}}
      env:
        IMAGE_NAME: $SERVICE_NAME

    push:
      desc: "Push docker image to repository"
      cmds:
        - docker push $DOCKER_REPO/$IMAGE_NAME:{{.GIT_COMMIT}}
      env:
        IMAGE_NAME: $SERVICE_NAME

    deploy:
      desc: "Deploy my image"
      cmds:
        - gcloud command to deploy stuff

    security:
      desc: Run all security scanners
      run: once
      cmds:
        - echo "ðŸ“’ {{.TASK}}"
        - if [[ "{{.CLI_ARGS}}" == *"sarif"* ]]; then mkdir -p sarif-reports; fi
        - task: security:filesystem:grype
        - task: security:secret:gitleaks  # scan:ignore

    security:filesystem:grype:
      desc: Run Grype (Filesystem Vulnerability Scanner)
      cmds:
        - echo "ðŸ“’ {{.TASK}}"
        - plugin_name="grype"; asdf plugin add "${plugin_name}" || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2)
        - grype "dir:." --output table --config .security/grype.yaml

    # Remove the --no-git flag if you want gitleaks to make a deep scan on the entire history of the repo
    security:secret:gitleaks:
      desc: Run Gitleaks
      cmds:
        - echo "ðŸ“’ {{.TASK}}"
        - |
          [[ "${GITHUB_ACTIONS}" == 'true' ]] && redact="--redact"
          echo "Gitleaks will scan the content of: {{.REPO_ABS_ROOT_PATH}}"
          if [[ "{{.CLI_ARGS}}" == *"sarif"* ]]; then
            docker run --rm --volume "{{.REPO_ABS_ROOT_PATH}}:/work" zricethezav/gitleaks:latest detect --no-git --exit-code 1 -v ${redact} --report-format "sarif" --report-path "sarif-reports/gitleaks-report.sarif" --source="/work" --config /work/.security/credscan-config.toml
          else
            docker run --rm --volume "{{.REPO_ABS_ROOT_PATH}}:/work" zricethezav/gitleaks:latest detect --no-git --exit-code 1 -v ${redact} --source="/work" --config /work/.security/credscan-config.toml
          fi
